# -*- coding: utf-8 -*-
"""app

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cvkT2ueV29lkTECF_pSVcKuPydMQvbht
"""
!pip install --upgrade pip

!pip install streamlit

!pip install transformers

!pip install googletrans

!pip install spaCy

import streamlit as st
from transformers import pipeline
import googletrans
from googletrans import LANGUAGES
import spacy

# Set up translation dictionary
translator = googletrans.Translator()
LANG_DICT = dict(zip(LANGUAGES.values(), LANGUAGES.keys()))

# Set up chatbot model
model = pipeline("conversational")

# Load the English language model in spaCy
nlp = spacy.load("en_core_web_sm")

# Define function to translate text
def translate_text(text, dest):
    translated_text = translator.translate(text, dest=dest).text
    return translated_text

# Define function to chat with chatbot
def chatbot_conversation(user_input, model):
    chatbot_response = model(user_input)[0]['generated_text']
    return chatbot_response

# Define a function that takes a sentence as input and returns the grammar explanation
def explain_grammar(sentence):
    # Parse the sentence using spaCy
    doc = nlp(sentence)
    
    # Extract the parts of speech and dependencies from the parsed sentence
    pos = [token.pos_ for token in doc]
    deps = [token.dep_ for token in doc]
    
    # Generate the grammar explanation based on the parts of speech and dependencies
    explanation = "This sentence is composed of "
    for i in range(len(pos)):
        if i == len(pos) - 1:
            explanation += "and "
        explanation += f"a {pos[i]} ({deps[i]}) "
    explanation += "structure."
    
    return explanation

# Set up app layout
st.set_page_config(page_title="Multilingual Chatbot")

st.title("Multilingual Chatbot")

# Get user's native language
native_language = st.selectbox("What is your native language?", list(LANG_DICT.keys()))

# Get user's target languages
target_languages = st.multiselect("Select target languages", list(LANG_DICT.keys()))

# Define function to handle user input and output responses
def chatbot_input_output():
    user_input = st.text_input("You: ")

    if user_input:
        if user_input == "explain grammar":
            st.write("Bot: Please enter a sentence for me to analyze its grammar.")
        else:
            for lang in target_languages:
                translated_input = translate_text(user_input, lang)
                st.write(f"{LANG_DICT[lang]}: {translated_input}")
                chatbot_response = chatbot_conversation(translated_input, model)
                translated_response = translate_text(chatbot_response, native_language)
                if translated_response == "I'm sorry, I do not understand.":
                    st.write(f"Bot: {translated_response}")
                else:
                    st.write(f"Bot: {translated_response}")
                    grammar_explanation = explain_grammar(user_input)
                    st.write(f"Bot: {grammar_explanation}")
            
# Display chatbot interface
chatbot_input_output()
